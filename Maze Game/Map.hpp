#include <iostream>
#include <stdio.h>
#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include "Tile.hpp"
#include "coin.hpp"
#include "Dog.hpp"


using namespace std;

class Map
{
private:
     
     Tile* road=nullptr;
     Tile* building=nullptr;
     Tile* wall=nullptr;
     Tile* end=nullptr;
     Tile* monster=nullptr;
     Tile* grass=nullptr;
     Tile* mud=nullptr;
     Tile* energypt=nullptr;
     Coin* coin=nullptr;
     Dog* dog=nullptr;

public:

     int map[30][100]=
     {
         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
         {0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,0},
         {0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0},
         {0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0},
         {0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2,2,2,1,0,0,0,0,0,0,1,1,0},
         {0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2,2,2,1,0,0,0,0,0,0,1,1,0},
         {0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,4,4,4,4,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,0,0,0,0,0,0,1,1,0},
         {0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,4,4,4,4,0,0,1,1,1,1,1,1,1,1,1,1,7,1,1,1,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,9,1,1,1,1,1,1,7,1,0},
         {0,0,0,0,0,0,0,0,1,7,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0},
         {0,0,0,0,0,0,0,0,1,1,4,4,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,2,2,2,2,2,0,1,1,0,0,0,0,0,0,2,2,2,2,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,4,4,4,4,4,0,4,4,4,4,4,0,1,0,0,0,0,0,0,0,1,0,4,4,4,4,0,1,1,0},
         {0,0,0,0,0,0,0,0,1,1,4,4,0,0,4,4,0,0,1,0,0,0,0,0,0,0,0,1,1,0,2,2,2,2,2,0,1,1,0,0,0,0,0,0,2,2,2,2,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,4,4,4,4,4,0,4,4,4,4,4,0,1,0,0,0,0,0,0,0,1,0,4,4,4,4,0,1,1,0},
         {0,0,0,0,0,0,0,0,1,1,4,4,0,0,4,4,0,0,1,0,0,0,0,0,0,0,0,1,1,0,2,2,2,2,2,0,1,1,0,0,0,0,0,0,2,2,2,2,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,4,4,4,4,4,0,4,4,4,4,4,0,1,0,0,0,0,0,0,0,1,0,4,4,4,4,0,1,1,0},
         {0,0,0,0,0,0,0,0,1,1,4,4,0,0,4,4,0,0,9,0,0,0,0,0,0,0,0,1,1,0,2,2,2,2,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,4,4,4,4,0,1,1,0},
         {0,0,0,0,0,0,0,0,1,1,4,4,0,0,4,4,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,4,4,4,4,4,4,0,4,4,4,4,0,1,0,0,0,0,0,0,0,1,0,4,4,4,4,0,1,1,0},
         {0,0,0,0,0,0,0,0,1,1,4,4,0,0,4,4,0,0,1,0,2,2,0,0,0,1,0,1,1,0,2,2,2,2,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,4,4,4,4,4,4,0,4,4,4,4,0,1,1,1,1,1,1,1,1,1,0,4,4,4,4,0,1,1,0},
         {0,0,0,0,0,0,0,0,1,1,4,4,0,0,4,4,0,0,1,0,2,2,1,1,1,1,0,1,1,0,2,2,2,2,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,4,4,4,4,4,4,0,4,4,4,4,0,1,1,1,1,1,1,1,1,1,0,4,4,4,4,0,1,1,0},
         {0,0,0,0,0,0,0,0,1,1,4,4,0,0,4,4,0,0,1,0,2,2,1,1,1,1,0,7,1,0,2,2,2,2,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,4,4,4,4,4,4,0,4,4,4,4,0,1,0,0,0,0,0,0,0,1,0,4,4,4,4,0,1,1,0},
         {0,0,0,0,0,0,0,0,1,1,4,4,0,0,4,4,0,0,1,0,0,0,0,0,0,1,0,1,1,0,2,2,2,2,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,4,4,4,4,4,4,0,4,4,4,4,0,1,0,4,4,4,4,4,0,9,0,4,4,4,4,0,1,1,0},
         {0,0,0,0,0,0,0,0,1,1,4,4,0,0,4,4,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,0,1,0,4,4,4,4,0,1,1,0},
         {0,0,0,0,0,0,0,0,1,1,4,4,0,0,4,4,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,7,1,1,1,1,1,1,1,1,1,1,3,0,0,0,0,4,4,4,4,4,0,1,0,0,0,0,0,0,1,1,0},
         {0,0,0,0,0,0,0,0,1,1,4,4,0,0,4,4,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,4,4,4,4,4,4,0,0,0,0,0,4,4,4,4,4,0,1,1,1,1,1,1,1,1,1,0},
         {0,0,0,0,0,0,0,0,1,1,4,4,0,0,4,4,0,0,1,0,0,0,0,0,0,0,0,1,9,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,4,4,4,4,4,4,0,0,0,0,0,4,4,4,4,4,0,1,1,1,1,1,1,1,7,1,0},
         {0,0,0,0,0,0,0,0,1,1,4,4,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0},
         {0,0,3,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0},
         {0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0},
         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,5,5,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0},
         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,5,5,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0},
         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,3,0,2,2,2,2,5,5,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0},
         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,2,2,2,2,0,5,5,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0},
         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,5,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
     };

    Map(SDL_Renderer* renderer);
    ~Map();
    void draw(SDL_Renderer* renderer,int tile_size);
    void clean();
    void move_x();
    void move_y();
    void update(int arr[],int n);
    void set_end();

    bool op_x=false;
    bool op_y=false;

    int count_x=0;
    int count_y=0;

    int wait_x=0;
    int wait_y=0;


    int monsters_along_y[4][2]={{12,18},{21,28},{19,50},{17,85}};  //change first values
    int monsters_along_x[4][2]={{7,41},{7,85},{1,81},{23,22}};
    int end_points[3][2]{{16,22},{13,52},{13,34}};    //change first values
};

void Map::set_end()
{
    cout<<"setting the end"<<end;
    double r = 3*(((double) rand() / (RAND_MAX)) + 1);
    cout<<"r: "<<r<<endl;
    if(r<1)
    {
        map[end_points[0][0]][end_points[0][1]]=11;
    }
    else if(1<=r<2)
    {
        map[end_points[1][0]][end_points[1][1]]=11;
    }
    else
    {
        map[end_points[2][0]][end_points[2][1]]=11;
    }
}

void Map::move_y()
{
    if(wait_y==10)
    {
        if(op_y)
        {
            for(int i=0;i<4;i++)
            {
                map[monsters_along_y[i][0]][monsters_along_y[i][1]]=1;
                monsters_along_y[i][0]++;
                map[monsters_along_y[i][0]][monsters_along_y[i][1]]=9;
            }
            count_y++;
            if(count_y==10)
            {
            op_y=false;
            count_y=0;
            }
        }
        else if(!op_y)
        {
            for(int i=0;i<4;i++)
            {
                map[monsters_along_y[i][0]][monsters_along_y[i][1]]=1;
                monsters_along_y[i][0]--;
                map[monsters_along_y[i][0]][monsters_along_y[i][1]]=9;
            }
            count_y++;
            if(count_y==10)
            {
            op_y=true;
            count_y=0;
            }
        }

        wait_y=0;
    }
    else{
        wait_y++;
    }
}

void Map::move_x()
{
    if(wait_x==10)
    {
        if(op_x)
        {
            for(int i=0;i<4;i++)
            {
                map[monsters_along_x[i][0]][monsters_along_x[i][1]]=1;
                monsters_along_x[i][1]++;
                map[monsters_along_x[i][0]][monsters_along_x[i][1]]=9;
            }
            count_x++;
            if(count_x==15)
            {
            op_x=false;
            count_x=0;
            }
        }
        else if(!op_x)
        {
            for(int i=0;i<4;i++)
            {
                map[monsters_along_x[i][0]][monsters_along_x[i][1]]=1;
                monsters_along_x[i][1]--;
                map[monsters_along_x[i][0]][monsters_along_x[i][1]]=9;
            }
            count_x++;
            if(count_x==15)
            {
            op_x=true;
            count_x=0;
            }
        }
        wait_x=0;
    }
    else{
        wait_x++;
    }
}

Map::Map(SDL_Renderer* renderer)
{
    set_end();

    road = new Tile();
    road->init(renderer,"./src/road.png");

    wall = new Tile();
    wall->init(renderer,"./src/wall2.png");

    building = new Tile();
    building->init(renderer,"./src/building.png");


    end = new Tile();
    end->init(renderer,"./src/end1.png");

    monster = new Tile();
    monster->init(renderer,"./src/ghost2.png");

    grass = new Tile();
    grass->init(renderer,"./src/grass.png");

    mud = new Tile();
    mud->init(renderer,"./src/mud.png");

    energypt = new Tile();
    energypt->init(renderer,"./src/energy.png");

    coin=new Coin(10);
    coin->init(renderer);

    dog=new Dog(DOG_SIZE);
    dog->init(renderer);
}

Map::~Map(){}

void Map::draw(SDL_Renderer* renderer, int tile_size)
{
    int type=0;
    int xpos=0;
    int ypos=0;

    move_x();
    move_y();

    for(int row=0;row<30;row++)
    {
        for(int col=0;col<100;col++)
        {
            type=map[row][col];
            xpos=col*tile_size;
            ypos=row*tile_size;
            switch (type)
            {
            case 9:
                road->draw(renderer,tile_size,xpos,ypos);
                dog->draw(renderer,xpos,ypos);
                break;
                
            case 0:
                grass->draw(renderer,tile_size,xpos,ypos);
                break;
            case 1:
                road->draw(renderer,tile_size,xpos,ypos);
                break;
            
            case 4:
                building->draw(renderer,tile_size,xpos,ypos);
                break;
            
            
            case 3:
                energypt->draw(renderer,tile_size,xpos,ypos);
                break;

            case 2:
                building->draw(renderer,tile_size,xpos,ypos);
                break;
            
            
            case 5:
                mud->draw(renderer,tile_size,xpos,ypos);
                break;

            case 7:
                road->draw(renderer,tile_size,xpos,ypos);
                coin->draw(renderer,xpos,ypos);
                break;

            case 11:
                end->draw(renderer,tile_size,xpos,ypos);
                break;

            

            default:
                break;
            }
        }
    }
}

void Map::clean()
{
    grass->clean();
    grass=nullptr;

    mud->clean();
    mud=nullptr;
    
    road->clean();
    road=nullptr;

    monster->clean();
    monster=nullptr;

    coin->clean();
    coin=nullptr;

    energypt->clean();
    energypt=nullptr;

    dog->clean();
    dog=nullptr;

}

void Map::update(int arr[],int n)
{
    int row,col;
    for (int i=0;i<n/2;i++)
    {
        row=arr[2*i];
        col=arr[2*i+1];

        map[row][col]=1;
    }
}